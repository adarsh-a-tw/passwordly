// Code generated by mockery v2.20.0. DO NOT EDIT.

package user_mocks

import (
	users "github.com/adarsh-a-tw/passwordly/users"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: u
func (_m *UserRepository) Create(u *users.User) error {
	ret := _m.Called(u)

	var r0 error
	if rf, ok := ret.Get(0).(func(*users.User) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: username, u
func (_m *UserRepository) Find(username string, u *users.User) error {
	ret := _m.Called(username, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *users.User) error); ok {
		r0 = rf(username, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: id, u
func (_m *UserRepository) FindById(id string, u *users.User) error {
	ret := _m.Called(id, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *users.User) error); ok {
		r0 = rf(id, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: u
func (_m *UserRepository) Update(u *users.User) error {
	ret := _m.Called(u)

	var r0 error
	if rf, ok := ret.Get(0).(func(*users.User) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
